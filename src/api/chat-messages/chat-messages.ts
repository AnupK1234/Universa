/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Universa
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost,
  ChatMessage,
  ChatMessageListResponse,
  ChatMessageUpdate,
  GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams,
  HTTPValidationError,
} from "../api.schemas";
import { customInstance } from "../../utils/api-client/customInstance.mjs";

/**
 * Get all chat messages for a conversation.
 * @summary Get Chat Messages
 */
export const getChatMessagesApiV1ConversationsConversationIdChatMessagesGet = (
  conversationId: string,
  params?: GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<ChatMessageListResponse>({
    url: `/api/v1/conversations/${conversationId}/chat_messages/`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetChatMessagesApiV1ConversationsConversationIdChatMessagesGetQueryKey =
  (
    conversationId: string,
    params?: GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams,
  ) => {
    return [
      `/api/v1/conversations/${conversationId}/chat_messages/`,
      ...(params ? [params] : []),
    ] as const;
  };

export const getGetChatMessagesApiV1ConversationsConversationIdChatMessagesGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
      >
    >,
    TError = HTTPValidationError,
  >(
    conversationId: string,
    params?: GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
            >
          >,
          TError,
          TData
        >
      >;
    },
  ) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetChatMessagesApiV1ConversationsConversationIdChatMessagesGetQueryKey(
        conversationId,
        params,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
        >
      >
    > = ({ signal }) =>
      getChatMessagesApiV1ConversationsConversationIdChatMessagesGet(
        conversationId,
        params,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!conversationId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData> };
  };

export type GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
      >
    >
  >;
export type GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetQueryError =
  HTTPValidationError;

export function useGetChatMessagesApiV1ConversationsConversationIdChatMessagesGet<
  TData = Awaited<
    ReturnType<
      typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
    >
  >,
  TError = HTTPValidationError,
>(
  conversationId: string,
  params:
    | undefined
    | GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetChatMessagesApiV1ConversationsConversationIdChatMessagesGet<
  TData = Awaited<
    ReturnType<
      typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
    >
  >,
  TError = HTTPValidationError,
>(
  conversationId: string,
  params?: GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetChatMessagesApiV1ConversationsConversationIdChatMessagesGet<
  TData = Awaited<
    ReturnType<
      typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
    >
  >,
  TError = HTTPValidationError,
>(
  conversationId: string,
  params?: GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
          >
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Chat Messages
 */

export function useGetChatMessagesApiV1ConversationsConversationIdChatMessagesGet<
  TData = Awaited<
    ReturnType<
      typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
    >
  >,
  TError = HTTPValidationError,
>(
  conversationId: string,
  params?: GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getChatMessagesApiV1ConversationsConversationIdChatMessagesGet
          >
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getGetChatMessagesApiV1ConversationsConversationIdChatMessagesGetQueryOptions(
      conversationId,
      params,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Chat with an agent, which is basically creating a chat_message model.
Supports file uploads such as images, PDFs, and text files.
If the agent is incapable of handling a file type, it wil state in the
the reply that it is not capable of handling that file type.

Args:
    query (str): The user's query for the agent.
    agent_data (Agent): The data of the agent. Please note that the agent_data
        has to be given as a JSON string in the following format:
        {
            "id": "66ede537b203ce723972cf35",
            "name": "Todo App Agent",
            "description": "This agent is designed to help users create a todo app.",
            "system_prompt": "You are a helpful assistant.",
            "model": "gpt-4o",
            "tools": ["web_scraper", "bing_search", "shell_execution", "file_writer"],
            "user_id": "6683627b3fa303ce6e010b5a",
            "type": "text_to_text",
            "memory_window": 10
        }
        Refer to the `Agent` model for more details.
    messages (List[ChatMessage]): The previous chat messages. Please note that
        the messages has to be given as a JSON string in the following format:
        "messages": [
            {
                "_id": "66ede59fb203ce723972cf36",
                "role": "user",
                "content": "How to make a todo app",
                "files": [],
                "created_at": "2024-09-21T03:14:07.304Z",
                "updated_at": "2024-09-21T03:14:07.304Z",
                "conversation_id": "66ede537b203ce723972cf35",
                "user_id": "6683627b3fa303ce6e010b5a"
            },
            {
                "_id": "66ede59fb203ce723972cf37",
                "role": "assistant",
                "content": "<response from the agent>",
                "files": [],
                "created_at": "2024-09-21T03:14:07.304Z",
                "updated_at": "2024-09-21T03:14:07.304Z",
                "conversation_id": "66ede537b203ce723972cf35",
                "user_id": "6683627b3fa303ce6e010b5a"
            },
        ]
        Please refer to the `ChatMessage` model for more details.
    additional_configs (Dict[str, Any]): Additional configuration options as a JSON string, such as "temperature", "tool_choice", etc.
        the payload has to be in the following format:
        {
            "temperature": "0.5",
            "tool_choice": "100"
        }
    files (List[UploadFile]): The files to upload.
 * @summary Chat With Agent
 */
export const chatWithAgentApiV1ConversationsConversationIdChatMessagesPost = (
  conversationId: string,
  bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost: BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(
    "agent_data",
    bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost.agent_data,
  );
  formData.append(
    "query",
    bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost.query,
  );
  if (
    bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost.messages !==
    undefined
  ) {
    formData.append(
      "messages",
      bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost.messages,
    );
  }
  if (
    bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost.additional_configs !==
    undefined
  ) {
    formData.append(
      "additional_configs",
      bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost.additional_configs,
    );
  }
  if (
    bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost.files !==
    undefined
  ) {
    bodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost.files.forEach(
      (value) => formData.append("files", value),
    );
  }

  return customInstance<ChatMessage>({
    url: `/api/v1/conversations/${conversationId}/chat_messages/`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getChatWithAgentApiV1ConversationsConversationIdChatMessagesPostMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof chatWithAgentApiV1ConversationsConversationIdChatMessagesPost
        >
      >,
      TError,
      {
        conversationId: string;
        data: BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost;
      },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof chatWithAgentApiV1ConversationsConversationIdChatMessagesPost
      >
    >,
    TError,
    {
      conversationId: string;
      data: BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost;
    },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof chatWithAgentApiV1ConversationsConversationIdChatMessagesPost
        >
      >,
      {
        conversationId: string;
        data: BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost;
      }
    > = (props) => {
      const { conversationId, data } = props ?? {};

      return chatWithAgentApiV1ConversationsConversationIdChatMessagesPost(
        conversationId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type ChatWithAgentApiV1ConversationsConversationIdChatMessagesPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof chatWithAgentApiV1ConversationsConversationIdChatMessagesPost
      >
    >
  >;
export type ChatWithAgentApiV1ConversationsConversationIdChatMessagesPostMutationBody =
  BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost;
export type ChatWithAgentApiV1ConversationsConversationIdChatMessagesPostMutationError =
  HTTPValidationError;

/**
 * @summary Chat With Agent
 */
export const useChatWithAgentApiV1ConversationsConversationIdChatMessagesPost =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof chatWithAgentApiV1ConversationsConversationIdChatMessagesPost
        >
      >,
      TError,
      {
        conversationId: string;
        data: BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost;
      },
      TContext
    >;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof chatWithAgentApiV1ConversationsConversationIdChatMessagesPost
      >
    >,
    TError,
    {
      conversationId: string;
      data: BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost;
    },
    TContext
  > => {
    const mutationOptions =
      getChatWithAgentApiV1ConversationsConversationIdChatMessagesPostMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };
/**
 * Get all chat messages for a conversation.
 * @summary Get Single Chat Message
 */
export const getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet =
  (conversationId: string, chatMessageId: string, signal?: AbortSignal) => {
    return customInstance<ChatMessage>({
      url: `/api/v1/conversations/${conversationId}/chat_messages/${chatMessageId}`,
      method: "GET",
      signal,
    });
  };

export const getGetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGetQueryKey =
  (conversationId: string, chatMessageId: string) => {
    return [
      `/api/v1/conversations/${conversationId}/chat_messages/${chatMessageId}`,
    ] as const;
  };

export const getGetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
      >
    >,
    TError = HTTPValidationError,
  >(
    conversationId: string,
    chatMessageId: string,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
            >
          >,
          TError,
          TData
        >
      >;
    },
  ) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGetQueryKey(
        conversationId,
        chatMessageId,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
        >
      >
    > = ({ signal }) =>
      getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet(
        conversationId,
        chatMessageId,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!(conversationId && chatMessageId),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData> };
  };

export type GetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
      >
    >
  >;
export type GetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGetQueryError =
  HTTPValidationError;

export function useGetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet<
  TData = Awaited<
    ReturnType<
      typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
    >
  >,
  TError = HTTPValidationError,
>(
  conversationId: string,
  chatMessageId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet<
  TData = Awaited<
    ReturnType<
      typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
    >
  >,
  TError = HTTPValidationError,
>(
  conversationId: string,
  chatMessageId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet<
  TData = Awaited<
    ReturnType<
      typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
    >
  >,
  TError = HTTPValidationError,
>(
  conversationId: string,
  chatMessageId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
          >
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Single Chat Message
 */

export function useGetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet<
  TData = Awaited<
    ReturnType<
      typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
    >
  >,
  TError = HTTPValidationError,
>(
  conversationId: string,
  chatMessageId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGet
          >
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getGetSingleChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdGetQueryOptions(
      conversationId,
      chatMessageId,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update a chat message.
 * @summary Update Chat Message
 */
export const updateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut =
  (
    conversationId: string,
    chatMessageId: string,
    chatMessageUpdate: ChatMessageUpdate,
  ) => {
    return customInstance<ChatMessage>({
      url: `/api/v1/conversations/${conversationId}/chat_messages/${chatMessageId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: chatMessageUpdate,
    });
  };

export const getUpdateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPutMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof updateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut
        >
      >,
      TError,
      {
        conversationId: string;
        chatMessageId: string;
        data: ChatMessageUpdate;
      },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof updateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut
      >
    >,
    TError,
    { conversationId: string; chatMessageId: string; data: ChatMessageUpdate },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof updateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut
        >
      >,
      { conversationId: string; chatMessageId: string; data: ChatMessageUpdate }
    > = (props) => {
      const { conversationId, chatMessageId, data } = props ?? {};

      return updateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut(
        conversationId,
        chatMessageId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPutMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof updateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut
      >
    >
  >;
export type UpdateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPutMutationBody =
  ChatMessageUpdate;
export type UpdateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPutMutationError =
  HTTPValidationError;

/**
 * @summary Update Chat Message
 */
export const useUpdateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof updateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut
        >
      >,
      TError,
      {
        conversationId: string;
        chatMessageId: string;
        data: ChatMessageUpdate;
      },
      TContext
    >;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof updateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPut
      >
    >,
    TError,
    { conversationId: string; chatMessageId: string; data: ChatMessageUpdate },
    TContext
  > => {
    const mutationOptions =
      getUpdateChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdPutMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };
/**
 * Delete a chat message.
 * @summary Delete Chat Message
 */
export const deleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete =
  (conversationId: string, chatMessageId: string) => {
    return customInstance<unknown>({
      url: `/api/v1/conversations/${conversationId}/chat_messages/${chatMessageId}`,
      method: "DELETE",
    });
  };

export const getDeleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDeleteMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete
        >
      >,
      TError,
      { conversationId: string; chatMessageId: string },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof deleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete
      >
    >,
    TError,
    { conversationId: string; chatMessageId: string },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof deleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete
        >
      >,
      { conversationId: string; chatMessageId: string }
    > = (props) => {
      const { conversationId, chatMessageId } = props ?? {};

      return deleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete(
        conversationId,
        chatMessageId,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete
      >
    >
  >;

export type DeleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Chat Message
 */
export const useDeleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete
        >
      >,
      TError,
      { conversationId: string; chatMessageId: string },
      TContext
    >;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof deleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDelete
      >
    >,
    TError,
    { conversationId: string; chatMessageId: string },
    TContext
  > => {
    const mutationOptions =
      getDeleteChatMessageApiV1ConversationsConversationIdChatMessagesChatMessageIdDeleteMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };
