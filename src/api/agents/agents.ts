/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Universa
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Agent,
  AgentCreate,
  AgentUpdate,
  GetAgentsByUserIdApiV1AgentsUserUserIdGetParams,
  GetAllAgentsAdminApiV1AgentsListAllGetParams,
  GetAllAgentsApiV1AgentsGetParams,
  HTTPValidationError,
  Models,
  Tools,
  UpdateAgentApiV1AgentsAgentIdPut200,
} from "../api.schemas";
import { customInstance } from "../../utils/api-client/customInstance.mjs";

/**
 * Get all agents for the current user. This does not have to be protected route
because the agents should be accessible by anyone to see. Anyone should be able
to go to user's profile and see the agents they have created.
TODO: Should we keep the route unprotected?
 * @summary Get All Agents
 */
export const getAllAgentsApiV1AgentsGet = (
  params?: GetAllAgentsApiV1AgentsGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<Agent[]>({
    url: `/api/v1/agents/`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetAllAgentsApiV1AgentsGetQueryKey = (
  params?: GetAllAgentsApiV1AgentsGetParams,
) => {
  return [`/api/v1/agents/`, ...(params ? [params] : [])] as const;
};

export const getGetAllAgentsApiV1AgentsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetAllAgentsApiV1AgentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllAgentsApiV1AgentsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>
  > = ({ signal }) => getAllAgentsApiV1AgentsGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAllAgentsApiV1AgentsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>
>;
export type GetAllAgentsApiV1AgentsGetQueryError = HTTPValidationError;

export function useGetAllAgentsApiV1AgentsGet<
  TData = Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetAllAgentsApiV1AgentsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetAllAgentsApiV1AgentsGet<
  TData = Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetAllAgentsApiV1AgentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllAgentsApiV1AgentsGet<
  TData = Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetAllAgentsApiV1AgentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get All Agents
 */

export function useGetAllAgentsApiV1AgentsGet<
  TData = Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetAllAgentsApiV1AgentsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsApiV1AgentsGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAllAgentsApiV1AgentsGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new agent.
 * @summary Create Agent
 */
export const createAgentApiV1AgentsPost = (
  agentCreate: AgentCreate,
  signal?: AbortSignal,
) => {
  return customInstance<Agent>({
    url: `/api/v1/agents/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: agentCreate,
    signal,
  });
};

export const getCreateAgentApiV1AgentsPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAgentApiV1AgentsPost>>,
    TError,
    { data: AgentCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAgentApiV1AgentsPost>>,
  TError,
  { data: AgentCreate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAgentApiV1AgentsPost>>,
    { data: AgentCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createAgentApiV1AgentsPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAgentApiV1AgentsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAgentApiV1AgentsPost>>
>;
export type CreateAgentApiV1AgentsPostMutationBody = AgentCreate;
export type CreateAgentApiV1AgentsPostMutationError = HTTPValidationError;

/**
 * @summary Create Agent
 */
export const useCreateAgentApiV1AgentsPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAgentApiV1AgentsPost>>,
    TError,
    { data: AgentCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createAgentApiV1AgentsPost>>,
  TError,
  { data: AgentCreate },
  TContext
> => {
  const mutationOptions = getCreateAgentApiV1AgentsPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get all available tools for the agents.
 * @summary Get Available Tool Names
 */
export const getAvailableToolNamesApiV1AgentsToolsGet = (
  signal?: AbortSignal,
) => {
  return customInstance<Tools>({
    url: `/api/v1/agents/tools`,
    method: "GET",
    signal,
  });
};

export const getGetAvailableToolNamesApiV1AgentsToolsGetQueryKey = () => {
  return [`/api/v1/agents/tools`] as const;
};

export const getGetAvailableToolNamesApiV1AgentsToolsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAvailableToolNamesApiV1AgentsToolsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>
  > = ({ signal }) => getAvailableToolNamesApiV1AgentsToolsGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAvailableToolNamesApiV1AgentsToolsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>
>;
export type GetAvailableToolNamesApiV1AgentsToolsGetQueryError = unknown;

export function useGetAvailableToolNamesApiV1AgentsToolsGet<
  TData = Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetAvailableToolNamesApiV1AgentsToolsGet<
  TData = Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAvailableToolNamesApiV1AgentsToolsGet<
  TData = Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Available Tool Names
 */

export function useGetAvailableToolNamesApiV1AgentsToolsGet<
  TData = Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableToolNamesApiV1AgentsToolsGet>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getGetAvailableToolNamesApiV1AgentsToolsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all available models for the agents to use.
 * @summary Get Available Model Names
 */
export const getAvailableModelNamesApiV1AgentsModelsGet = (
  signal?: AbortSignal,
) => {
  return customInstance<Models>({
    url: `/api/v1/agents/models`,
    method: "GET",
    signal,
  });
};

export const getGetAvailableModelNamesApiV1AgentsModelsGetQueryKey = () => {
  return [`/api/v1/agents/models`] as const;
};

export const getGetAvailableModelNamesApiV1AgentsModelsGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAvailableModelNamesApiV1AgentsModelsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>
  > = ({ signal }) => getAvailableModelNamesApiV1AgentsModelsGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAvailableModelNamesApiV1AgentsModelsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>
>;
export type GetAvailableModelNamesApiV1AgentsModelsGetQueryError = unknown;

export function useGetAvailableModelNamesApiV1AgentsModelsGet<
  TData = Awaited<
    ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>
  >,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetAvailableModelNamesApiV1AgentsModelsGet<
  TData = Awaited<
    ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAvailableModelNamesApiV1AgentsModelsGet<
  TData = Awaited<
    ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Available Model Names
 */

export function useGetAvailableModelNamesApiV1AgentsModelsGet<
  TData = Awaited<
    ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAvailableModelNamesApiV1AgentsModelsGet>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getGetAvailableModelNamesApiV1AgentsModelsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a single agent by its ID. This does not have to be protected route
because the agent should be accessible by anyone to see. Anyone should be able
to go to user's profile, click an agent to see the detail.
TODO: Should we keep the route unprotected?
 * @summary Get Single Agent
 */
export const getSingleAgentApiV1AgentsAgentIdGet = (
  agentId: string,
  signal?: AbortSignal,
) => {
  return customInstance<Agent>({
    url: `/api/v1/agents/${agentId}`,
    method: "GET",
    signal,
  });
};

export const getGetSingleAgentApiV1AgentsAgentIdGetQueryKey = (
  agentId: string,
) => {
  return [`/api/v1/agents/${agentId}`] as const;
};

export const getGetSingleAgentApiV1AgentsAgentIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
  TError = HTTPValidationError,
>(
  agentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSingleAgentApiV1AgentsAgentIdGetQueryKey(agentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>
  > = ({ signal }) => getSingleAgentApiV1AgentsAgentIdGet(agentId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!agentId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetSingleAgentApiV1AgentsAgentIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>
>;
export type GetSingleAgentApiV1AgentsAgentIdGetQueryError = HTTPValidationError;

export function useGetSingleAgentApiV1AgentsAgentIdGet<
  TData = Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
  TError = HTTPValidationError,
>(
  agentId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetSingleAgentApiV1AgentsAgentIdGet<
  TData = Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
  TError = HTTPValidationError,
>(
  agentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetSingleAgentApiV1AgentsAgentIdGet<
  TData = Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
  TError = HTTPValidationError,
>(
  agentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Single Agent
 */

export function useGetSingleAgentApiV1AgentsAgentIdGet<
  TData = Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
  TError = HTTPValidationError,
>(
  agentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSingleAgentApiV1AgentsAgentIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetSingleAgentApiV1AgentsAgentIdGetQueryOptions(
    agentId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an agent.
 * @summary Update Agent
 */
export const updateAgentApiV1AgentsAgentIdPut = (
  agentId: string,
  agentUpdate: AgentUpdate,
) => {
  return customInstance<UpdateAgentApiV1AgentsAgentIdPut200>({
    url: `/api/v1/agents/${agentId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: agentUpdate,
  });
};

export const getUpdateAgentApiV1AgentsAgentIdPutMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAgentApiV1AgentsAgentIdPut>>,
    TError,
    { agentId: string; data: AgentUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAgentApiV1AgentsAgentIdPut>>,
  TError,
  { agentId: string; data: AgentUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAgentApiV1AgentsAgentIdPut>>,
    { agentId: string; data: AgentUpdate }
  > = (props) => {
    const { agentId, data } = props ?? {};

    return updateAgentApiV1AgentsAgentIdPut(agentId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateAgentApiV1AgentsAgentIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAgentApiV1AgentsAgentIdPut>>
>;
export type UpdateAgentApiV1AgentsAgentIdPutMutationBody = AgentUpdate;
export type UpdateAgentApiV1AgentsAgentIdPutMutationError = HTTPValidationError;

/**
 * @summary Update Agent
 */
export const useUpdateAgentApiV1AgentsAgentIdPut = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAgentApiV1AgentsAgentIdPut>>,
    TError,
    { agentId: string; data: AgentUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAgentApiV1AgentsAgentIdPut>>,
  TError,
  { agentId: string; data: AgentUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateAgentApiV1AgentsAgentIdPutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Deletes the agent from the database. Both MongoDB and ChromaDB.
 * @summary Delete Agent
 */
export const deleteAgentApiV1AgentsAgentIdDelete = (agentId: string) => {
  return customInstance<unknown>({
    url: `/api/v1/agents/${agentId}`,
    method: "DELETE",
  });
};

export const getDeleteAgentApiV1AgentsAgentIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAgentApiV1AgentsAgentIdDelete>>,
    TError,
    { agentId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAgentApiV1AgentsAgentIdDelete>>,
  TError,
  { agentId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAgentApiV1AgentsAgentIdDelete>>,
    { agentId: string }
  > = (props) => {
    const { agentId } = props ?? {};

    return deleteAgentApiV1AgentsAgentIdDelete(agentId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAgentApiV1AgentsAgentIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAgentApiV1AgentsAgentIdDelete>>
>;

export type DeleteAgentApiV1AgentsAgentIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Agent
 */
export const useDeleteAgentApiV1AgentsAgentIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAgentApiV1AgentsAgentIdDelete>>,
    TError,
    { agentId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteAgentApiV1AgentsAgentIdDelete>>,
  TError,
  { agentId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteAgentApiV1AgentsAgentIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get all agents for a specific user by their user_id.
This route is public and allows anyone to view agents created by a particular user.
 * @summary Get Agents By User Id
 */
export const getAgentsByUserIdApiV1AgentsUserUserIdGet = (
  userId: string,
  params?: GetAgentsByUserIdApiV1AgentsUserUserIdGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<Agent[]>({
    url: `/api/v1/agents/user/${userId}`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetAgentsByUserIdApiV1AgentsUserUserIdGetQueryKey = (
  userId: string,
  params?: GetAgentsByUserIdApiV1AgentsUserUserIdGetParams,
) => {
  return [
    `/api/v1/agents/user/${userId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAgentsByUserIdApiV1AgentsUserUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  params?: GetAgentsByUserIdApiV1AgentsUserUserIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAgentsByUserIdApiV1AgentsUserUserIdGetQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>
  > = ({ signal }) =>
    getAgentsByUserIdApiV1AgentsUserUserIdGet(userId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAgentsByUserIdApiV1AgentsUserUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>
>;
export type GetAgentsByUserIdApiV1AgentsUserUserIdGetQueryError =
  HTTPValidationError;

export function useGetAgentsByUserIdApiV1AgentsUserUserIdGet<
  TData = Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  params: undefined | GetAgentsByUserIdApiV1AgentsUserUserIdGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetAgentsByUserIdApiV1AgentsUserUserIdGet<
  TData = Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  params?: GetAgentsByUserIdApiV1AgentsUserUserIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAgentsByUserIdApiV1AgentsUserUserIdGet<
  TData = Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  params?: GetAgentsByUserIdApiV1AgentsUserUserIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Agents By User Id
 */

export function useGetAgentsByUserIdApiV1AgentsUserUserIdGet<
  TData = Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  params?: GetAgentsByUserIdApiV1AgentsUserUserIdGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAgentsByUserIdApiV1AgentsUserUserIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAgentsByUserIdApiV1AgentsUserUserIdGetQueryOptions(
    userId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all agents regardless of the user. This is an admin-level endpoint.
 * @summary Get All Agents Admin
 */
export const getAllAgentsAdminApiV1AgentsListAllGet = (
  params?: GetAllAgentsAdminApiV1AgentsListAllGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<Agent[]>({
    url: `/api/v1/agents/list/all`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetAllAgentsAdminApiV1AgentsListAllGetQueryKey = (
  params?: GetAllAgentsAdminApiV1AgentsListAllGetParams,
) => {
  return [`/api/v1/agents/list/all`, ...(params ? [params] : [])] as const;
};

export const getGetAllAgentsAdminApiV1AgentsListAllGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
  TError = HTTPValidationError,
>(
  params?: GetAllAgentsAdminApiV1AgentsListAllGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAllAgentsAdminApiV1AgentsListAllGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>
  > = ({ signal }) => getAllAgentsAdminApiV1AgentsListAllGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetAllAgentsAdminApiV1AgentsListAllGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>
>;
export type GetAllAgentsAdminApiV1AgentsListAllGetQueryError =
  HTTPValidationError;

export function useGetAllAgentsAdminApiV1AgentsListAllGet<
  TData = Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetAllAgentsAdminApiV1AgentsListAllGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetAllAgentsAdminApiV1AgentsListAllGet<
  TData = Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
  TError = HTTPValidationError,
>(
  params?: GetAllAgentsAdminApiV1AgentsListAllGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetAllAgentsAdminApiV1AgentsListAllGet<
  TData = Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
  TError = HTTPValidationError,
>(
  params?: GetAllAgentsAdminApiV1AgentsListAllGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get All Agents Admin
 */

export function useGetAllAgentsAdminApiV1AgentsListAllGet<
  TData = Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
  TError = HTTPValidationError,
>(
  params?: GetAllAgentsAdminApiV1AgentsListAllGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllAgentsAdminApiV1AgentsListAllGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAllAgentsAdminApiV1AgentsListAllGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
