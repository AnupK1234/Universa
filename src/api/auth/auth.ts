/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Universa
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AuthConfirmSignUpApiV1ConfirmSignUpGetParams,
  BodyAuthLoginApiV1LoginPost,
  ChangePasswordPayload,
  CheckEmailApiV1CheckEmailGet200,
  CheckEmailApiV1CheckEmailGetParams,
  ConfirmResetPasswordPayload,
  CreateUserPayload,
  HTTPValidationError,
  RefreshTokenPayload,
  ResendConfirmationEmailPayload,
  ResetPasswordPayload,
  TokenModel,
  UserResponse,
} from "../api.schemas";
import { customInstance } from "../../utils/api-client/customInstance.mjs";

/**
 * Authenticate a user and issue a JWT token.
 * @summary Auth Login
 */
export const authLoginApiV1LoginPost = (
  bodyAuthLoginApiV1LoginPost: BodyAuthLoginApiV1LoginPost,
  signal?: AbortSignal,
) => {
  const formUrlEncoded = new URLSearchParams();
  if (
    bodyAuthLoginApiV1LoginPost.grant_type !== undefined &&
    bodyAuthLoginApiV1LoginPost.grant_type !== null
  ) {
    formUrlEncoded.append("grant_type", bodyAuthLoginApiV1LoginPost.grant_type);
  }
  formUrlEncoded.append("username", bodyAuthLoginApiV1LoginPost.username);
  formUrlEncoded.append("password", bodyAuthLoginApiV1LoginPost.password);
  if (bodyAuthLoginApiV1LoginPost.scope !== undefined) {
    formUrlEncoded.append("scope", bodyAuthLoginApiV1LoginPost.scope);
  }
  if (
    bodyAuthLoginApiV1LoginPost.client_id !== undefined &&
    bodyAuthLoginApiV1LoginPost.client_id !== null
  ) {
    formUrlEncoded.append("client_id", bodyAuthLoginApiV1LoginPost.client_id);
  }
  if (
    bodyAuthLoginApiV1LoginPost.client_secret !== undefined &&
    bodyAuthLoginApiV1LoginPost.client_secret !== null
  ) {
    formUrlEncoded.append(
      "client_secret",
      bodyAuthLoginApiV1LoginPost.client_secret,
    );
  }

  return customInstance<TokenModel>({
    url: `/api/v1/login`,
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    data: formUrlEncoded,
    signal,
  });
};

export const getAuthLoginApiV1LoginPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLoginApiV1LoginPost>>,
    TError,
    { data: BodyAuthLoginApiV1LoginPost },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authLoginApiV1LoginPost>>,
  TError,
  { data: BodyAuthLoginApiV1LoginPost },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authLoginApiV1LoginPost>>,
    { data: BodyAuthLoginApiV1LoginPost }
  > = (props) => {
    const { data } = props ?? {};

    return authLoginApiV1LoginPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLoginApiV1LoginPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof authLoginApiV1LoginPost>>
>;
export type AuthLoginApiV1LoginPostMutationBody = BodyAuthLoginApiV1LoginPost;
export type AuthLoginApiV1LoginPostMutationError = HTTPValidationError;

/**
 * @summary Auth Login
 */
export const useAuthLoginApiV1LoginPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLoginApiV1LoginPost>>,
    TError,
    { data: BodyAuthLoginApiV1LoginPost },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof authLoginApiV1LoginPost>>,
  TError,
  { data: BodyAuthLoginApiV1LoginPost },
  TContext
> => {
  const mutationOptions = getAuthLoginApiV1LoginPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Log out the current user by invalidating their access token.
 * @summary Auth Logout
 */
export const authLogoutApiV1LogoutPost = (signal?: AbortSignal) => {
  return customInstance<unknown>({
    url: `/api/v1/logout`,
    method: "POST",
    signal,
  });
};

export const getAuthLogoutApiV1LogoutPostMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogoutApiV1LogoutPost>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authLogoutApiV1LogoutPost>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authLogoutApiV1LogoutPost>>,
    void
  > = () => {
    return authLogoutApiV1LogoutPost();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLogoutApiV1LogoutPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof authLogoutApiV1LogoutPost>>
>;

export type AuthLogoutApiV1LogoutPostMutationError = unknown;

/**
 * @summary Auth Logout
 */
export const useAuthLogoutApiV1LogoutPost = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogoutApiV1LogoutPost>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof authLogoutApiV1LogoutPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthLogoutApiV1LogoutPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Register a new user account.
 * @summary Auth Sign Up
 */
export const authSignUpApiV1SignUpPost = (
  createUserPayload: CreateUserPayload,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse>({
    url: `/api/v1/sign-up`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserPayload,
    signal,
  });
};

export const getAuthSignUpApiV1SignUpPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authSignUpApiV1SignUpPost>>,
    TError,
    { data: CreateUserPayload },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authSignUpApiV1SignUpPost>>,
  TError,
  { data: CreateUserPayload },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authSignUpApiV1SignUpPost>>,
    { data: CreateUserPayload }
  > = (props) => {
    const { data } = props ?? {};

    return authSignUpApiV1SignUpPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthSignUpApiV1SignUpPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof authSignUpApiV1SignUpPost>>
>;
export type AuthSignUpApiV1SignUpPostMutationBody = CreateUserPayload;
export type AuthSignUpApiV1SignUpPostMutationError = HTTPValidationError;

/**
 * @summary Auth Sign Up
 */
export const useAuthSignUpApiV1SignUpPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authSignUpApiV1SignUpPost>>,
    TError,
    { data: CreateUserPayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof authSignUpApiV1SignUpPost>>,
  TError,
  { data: CreateUserPayload },
  TContext
> => {
  const mutationOptions = getAuthSignUpApiV1SignUpPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Check if an email is already registered.

Args:
    email (str): The email address to check.

Returns:
    dict: A dictionary with the email's registration status.
 * @summary Check Email
 */
export const checkEmailApiV1CheckEmailGet = (
  params: CheckEmailApiV1CheckEmailGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<CheckEmailApiV1CheckEmailGet200>({
    url: `/api/v1/check-email`,
    method: "GET",
    params,
    signal,
  });
};

export const getCheckEmailApiV1CheckEmailGetQueryKey = (
  params: CheckEmailApiV1CheckEmailGetParams,
) => {
  return [`/api/v1/check-email`, ...(params ? [params] : [])] as const;
};

export const getCheckEmailApiV1CheckEmailGetQueryOptions = <
  TData = Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
  TError = HTTPValidationError,
>(
  params: CheckEmailApiV1CheckEmailGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCheckEmailApiV1CheckEmailGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>
  > = ({ signal }) => checkEmailApiV1CheckEmailGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type CheckEmailApiV1CheckEmailGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>
>;
export type CheckEmailApiV1CheckEmailGetQueryError = HTTPValidationError;

export function useCheckEmailApiV1CheckEmailGet<
  TData = Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
  TError = HTTPValidationError,
>(
  params: CheckEmailApiV1CheckEmailGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useCheckEmailApiV1CheckEmailGet<
  TData = Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
  TError = HTTPValidationError,
>(
  params: CheckEmailApiV1CheckEmailGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useCheckEmailApiV1CheckEmailGet<
  TData = Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
  TError = HTTPValidationError,
>(
  params: CheckEmailApiV1CheckEmailGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Check Email
 */

export function useCheckEmailApiV1CheckEmailGet<
  TData = Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
  TError = HTTPValidationError,
>(
  params: CheckEmailApiV1CheckEmailGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkEmailApiV1CheckEmailGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getCheckEmailApiV1CheckEmailGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Confirm the user's email address using a confirmation token.
 * @summary Auth Confirm Sign Up
 */
export const authConfirmSignUpApiV1ConfirmSignUpGet = (
  params: AuthConfirmSignUpApiV1ConfirmSignUpGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({
    url: `/api/v1/confirm-sign-up`,
    method: "GET",
    params,
    signal,
  });
};

export const getAuthConfirmSignUpApiV1ConfirmSignUpGetQueryKey = (
  params: AuthConfirmSignUpApiV1ConfirmSignUpGetParams,
) => {
  return [`/api/v1/confirm-sign-up`, ...(params ? [params] : [])] as const;
};

export const getAuthConfirmSignUpApiV1ConfirmSignUpGetQueryOptions = <
  TData = Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
  TError = HTTPValidationError,
>(
  params: AuthConfirmSignUpApiV1ConfirmSignUpGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAuthConfirmSignUpApiV1ConfirmSignUpGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>
  > = ({ signal }) => authConfirmSignUpApiV1ConfirmSignUpGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type AuthConfirmSignUpApiV1ConfirmSignUpGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>
>;
export type AuthConfirmSignUpApiV1ConfirmSignUpGetQueryError =
  HTTPValidationError;

export function useAuthConfirmSignUpApiV1ConfirmSignUpGet<
  TData = Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
  TError = HTTPValidationError,
>(
  params: AuthConfirmSignUpApiV1ConfirmSignUpGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useAuthConfirmSignUpApiV1ConfirmSignUpGet<
  TData = Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
  TError = HTTPValidationError,
>(
  params: AuthConfirmSignUpApiV1ConfirmSignUpGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAuthConfirmSignUpApiV1ConfirmSignUpGet<
  TData = Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
  TError = HTTPValidationError,
>(
  params: AuthConfirmSignUpApiV1ConfirmSignUpGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Auth Confirm Sign Up
 */

export function useAuthConfirmSignUpApiV1ConfirmSignUpGet<
  TData = Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
  TError = HTTPValidationError,
>(
  params: AuthConfirmSignUpApiV1ConfirmSignUpGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authConfirmSignUpApiV1ConfirmSignUpGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAuthConfirmSignUpApiV1ConfirmSignUpGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Resend the email confirmation link to a user.
 * @summary Auth Resend Confirmation Email
 */
export const authResendConfirmationEmailApiV1ResendConfirmationEmailPost = (
  resendConfirmationEmailPayload: ResendConfirmationEmailPayload,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({
    url: `/api/v1/resend-confirmation-email`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: resendConfirmationEmailPayload,
    signal,
  });
};

export const getAuthResendConfirmationEmailApiV1ResendConfirmationEmailPostMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof authResendConfirmationEmailApiV1ResendConfirmationEmailPost
        >
      >,
      TError,
      { data: ResendConfirmationEmailPayload },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof authResendConfirmationEmailApiV1ResendConfirmationEmailPost
      >
    >,
    TError,
    { data: ResendConfirmationEmailPayload },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof authResendConfirmationEmailApiV1ResendConfirmationEmailPost
        >
      >,
      { data: ResendConfirmationEmailPayload }
    > = (props) => {
      const { data } = props ?? {};

      return authResendConfirmationEmailApiV1ResendConfirmationEmailPost(data);
    };

    return { mutationFn, ...mutationOptions };
  };

export type AuthResendConfirmationEmailApiV1ResendConfirmationEmailPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof authResendConfirmationEmailApiV1ResendConfirmationEmailPost
      >
    >
  >;
export type AuthResendConfirmationEmailApiV1ResendConfirmationEmailPostMutationBody =
  ResendConfirmationEmailPayload;
export type AuthResendConfirmationEmailApiV1ResendConfirmationEmailPostMutationError =
  HTTPValidationError;

/**
 * @summary Auth Resend Confirmation Email
 */
export const useAuthResendConfirmationEmailApiV1ResendConfirmationEmailPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<
        typeof authResendConfirmationEmailApiV1ResendConfirmationEmailPost
      >
    >,
    TError,
    { data: ResendConfirmationEmailPayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<
      typeof authResendConfirmationEmailApiV1ResendConfirmationEmailPost
    >
  >,
  TError,
  { data: ResendConfirmationEmailPayload },
  TContext
> => {
  const mutationOptions =
    getAuthResendConfirmationEmailApiV1ResendConfirmationEmailPostMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
/**
 * Allow a logged-in user to change their password.
 * @summary Auth Change Password
 */
export const authChangePasswordApiV1ChangePasswordPost = (
  changePasswordPayload: ChangePasswordPayload,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({
    url: `/api/v1/change-password`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: changePasswordPayload,
    signal,
  });
};

export const getAuthChangePasswordApiV1ChangePasswordPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authChangePasswordApiV1ChangePasswordPost>>,
    TError,
    { data: ChangePasswordPayload },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authChangePasswordApiV1ChangePasswordPost>>,
  TError,
  { data: ChangePasswordPayload },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authChangePasswordApiV1ChangePasswordPost>>,
    { data: ChangePasswordPayload }
  > = (props) => {
    const { data } = props ?? {};

    return authChangePasswordApiV1ChangePasswordPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthChangePasswordApiV1ChangePasswordPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof authChangePasswordApiV1ChangePasswordPost>>
  >;
export type AuthChangePasswordApiV1ChangePasswordPostMutationBody =
  ChangePasswordPayload;
export type AuthChangePasswordApiV1ChangePasswordPostMutationError =
  HTTPValidationError;

/**
 * @summary Auth Change Password
 */
export const useAuthChangePasswordApiV1ChangePasswordPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authChangePasswordApiV1ChangePasswordPost>>,
    TError,
    { data: ChangePasswordPayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof authChangePasswordApiV1ChangePasswordPost>>,
  TError,
  { data: ChangePasswordPayload },
  TContext
> => {
  const mutationOptions =
    getAuthChangePasswordApiV1ChangePasswordPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Initiate a password reset process by sending a reset link to the user's email.
 * @summary Auth Reset Password
 */
export const authResetPasswordApiV1ResetPasswordPost = (
  resetPasswordPayload: ResetPasswordPayload,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({
    url: `/api/v1/reset-password`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: resetPasswordPayload,
    signal,
  });
};

export const getAuthResetPasswordApiV1ResetPasswordPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authResetPasswordApiV1ResetPasswordPost>>,
    TError,
    { data: ResetPasswordPayload },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authResetPasswordApiV1ResetPasswordPost>>,
  TError,
  { data: ResetPasswordPayload },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authResetPasswordApiV1ResetPasswordPost>>,
    { data: ResetPasswordPayload }
  > = (props) => {
    const { data } = props ?? {};

    return authResetPasswordApiV1ResetPasswordPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthResetPasswordApiV1ResetPasswordPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof authResetPasswordApiV1ResetPasswordPost>>
>;
export type AuthResetPasswordApiV1ResetPasswordPostMutationBody =
  ResetPasswordPayload;
export type AuthResetPasswordApiV1ResetPasswordPostMutationError =
  HTTPValidationError;

/**
 * @summary Auth Reset Password
 */
export const useAuthResetPasswordApiV1ResetPasswordPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authResetPasswordApiV1ResetPasswordPost>>,
    TError,
    { data: ResetPasswordPayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof authResetPasswordApiV1ResetPasswordPost>>,
  TError,
  { data: ResetPasswordPayload },
  TContext
> => {
  const mutationOptions =
    getAuthResetPasswordApiV1ResetPasswordPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Confirm the password reset using a token and set a new password.
 * @summary Auth Confirm Reset Password
 */
export const authConfirmResetPasswordApiV1ResetPasswordConfirmPost = (
  confirmResetPasswordPayload: ConfirmResetPasswordPayload,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({
    url: `/api/v1/reset-password/confirm`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: confirmResetPasswordPayload,
    signal,
  });
};

export const getAuthConfirmResetPasswordApiV1ResetPasswordConfirmPostMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof authConfirmResetPasswordApiV1ResetPasswordConfirmPost>
      >,
      TError,
      { data: ConfirmResetPasswordPayload },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof authConfirmResetPasswordApiV1ResetPasswordConfirmPost>
    >,
    TError,
    { data: ConfirmResetPasswordPayload },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof authConfirmResetPasswordApiV1ResetPasswordConfirmPost>
      >,
      { data: ConfirmResetPasswordPayload }
    > = (props) => {
      const { data } = props ?? {};

      return authConfirmResetPasswordApiV1ResetPasswordConfirmPost(data);
    };

    return { mutationFn, ...mutationOptions };
  };

export type AuthConfirmResetPasswordApiV1ResetPasswordConfirmPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof authConfirmResetPasswordApiV1ResetPasswordConfirmPost>
    >
  >;
export type AuthConfirmResetPasswordApiV1ResetPasswordConfirmPostMutationBody =
  ConfirmResetPasswordPayload;
export type AuthConfirmResetPasswordApiV1ResetPasswordConfirmPostMutationError =
  HTTPValidationError;

/**
 * @summary Auth Confirm Reset Password
 */
export const useAuthConfirmResetPasswordApiV1ResetPasswordConfirmPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof authConfirmResetPasswordApiV1ResetPasswordConfirmPost>
    >,
    TError,
    { data: ConfirmResetPasswordPayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<typeof authConfirmResetPasswordApiV1ResetPasswordConfirmPost>
  >,
  TError,
  { data: ConfirmResetPasswordPayload },
  TContext
> => {
  const mutationOptions =
    getAuthConfirmResetPasswordApiV1ResetPasswordConfirmPostMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
/**
 * Refresh the JWT token to keep the user logged in.
 * @summary Auth Refresh Token
 */
export const authRefreshTokenApiV1RefreshTokenPost = (
  refreshTokenPayload: RefreshTokenPayload,
  signal?: AbortSignal,
) => {
  return customInstance<TokenModel>({
    url: `/api/v1/refresh-token`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenPayload,
    signal,
  });
};

export const getAuthRefreshTokenApiV1RefreshTokenPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authRefreshTokenApiV1RefreshTokenPost>>,
    TError,
    { data: RefreshTokenPayload },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authRefreshTokenApiV1RefreshTokenPost>>,
  TError,
  { data: RefreshTokenPayload },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authRefreshTokenApiV1RefreshTokenPost>>,
    { data: RefreshTokenPayload }
  > = (props) => {
    const { data } = props ?? {};

    return authRefreshTokenApiV1RefreshTokenPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthRefreshTokenApiV1RefreshTokenPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof authRefreshTokenApiV1RefreshTokenPost>>
>;
export type AuthRefreshTokenApiV1RefreshTokenPostMutationBody =
  RefreshTokenPayload;
export type AuthRefreshTokenApiV1RefreshTokenPostMutationError =
  HTTPValidationError;

/**
 * @summary Auth Refresh Token
 */
export const useAuthRefreshTokenApiV1RefreshTokenPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authRefreshTokenApiV1RefreshTokenPost>>,
    TError,
    { data: RefreshTokenPayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof authRefreshTokenApiV1RefreshTokenPost>>,
  TError,
  { data: RefreshTokenPayload },
  TContext
> => {
  const mutationOptions =
    getAuthRefreshTokenApiV1RefreshTokenPostMutationOptions(options);

  return useMutation(mutationOptions);
};
