/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Universa
 * OpenAPI spec version: 0.1.0
 */
export type GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetSortOrder = typeof GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetSortOrder[keyof typeof GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetSortOrder = {
  NUMBER_MINUS_1: '-1',
  NUMBER_1: '1',
} as const;

export type GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetParams = {
skip?: number;
limit?: number;
sort_by?: string;
sort_order?: GetChatMessagesApiV1ConversationsConversationIdChatMessagesGetSortOrder;
};

export type GetConversationsApiV1AgentsAgentIdConversationsGetSortOrder = typeof GetConversationsApiV1AgentsAgentIdConversationsGetSortOrder[keyof typeof GetConversationsApiV1AgentsAgentIdConversationsGetSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConversationsApiV1AgentsAgentIdConversationsGetSortOrder = {
  NUMBER_1: '1',
  NUMBER_MINUS_1: '-1',
} as const;

export type GetConversationsApiV1AgentsAgentIdConversationsGetParams = {
skip?: number;
limit?: number;
sort_by?: string;
sort_order?: GetConversationsApiV1AgentsAgentIdConversationsGetSortOrder;
};

export type RunSingleIterationApiV1StateMachinesRunSingleIterationPost200 = { [key: string]: unknown };

export type RunSingleIterationApiV1StateMachinesRunSingleIterationPostParams = {
state_machine_id: string;
};

export type GetAllSessionsApiV1StateMachinesGetAllSessionsPost200 = { [key: string]: unknown };

export type GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody = {[key: string]: boolean};

export type GetAllSessionsApiV1StateMachinesGetAllSessionsPostSortOrder = typeof GetAllSessionsApiV1StateMachinesGetAllSessionsPostSortOrder[keyof typeof GetAllSessionsApiV1StateMachinesGetAllSessionsPostSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAllSessionsApiV1StateMachinesGetAllSessionsPostSortOrder = {
  NUMBER_MINUS_1: '-1',
  NUMBER_1: '1',
} as const;

export type GetAllSessionsApiV1StateMachinesGetAllSessionsPostParams = {
skip?: number;
limit?: number;
sort_by?: string;
sort_order?: GetAllSessionsApiV1StateMachinesGetAllSessionsPostSortOrder;
};

export type GetUsersByGeoinfoApiV1UsersGeoinfoGetSortOrder = typeof GetUsersByGeoinfoApiV1UsersGeoinfoGetSortOrder[keyof typeof GetUsersByGeoinfoApiV1UsersGeoinfoGetSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersByGeoinfoApiV1UsersGeoinfoGetSortOrder = {
  NUMBER_1: '1',
  NUMBER_MINUS_1: '-1',
} as const;

export type GetUsersByGeoinfoApiV1UsersGeoinfoGetParams = {
lower_latitude: number;
upper_latitude: number;
lower_longitude: number;
upper_longitude: number;
skip?: number;
limit?: number;
sort_by?: string;
sort_order?: GetUsersByGeoinfoApiV1UsersGeoinfoGetSortOrder;
};

export type ReadUsersApiV1UsersGetSortOrder = typeof ReadUsersApiV1UsersGetSortOrder[keyof typeof ReadUsersApiV1UsersGetSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReadUsersApiV1UsersGetSortOrder = {
  NUMBER_1: '1',
  NUMBER_MINUS_1: '-1',
} as const;

export type ReadUsersApiV1UsersGetParams = {
filter_by?: string;
filter_value?: string;
sort_by?: string;
sort_order?: ReadUsersApiV1UsersGetSortOrder;
skip?: number;
limit?: number;
};

export type GetAllAgentsAdminApiV1AgentsListAllGetSortOrder = typeof GetAllAgentsAdminApiV1AgentsListAllGetSortOrder[keyof typeof GetAllAgentsAdminApiV1AgentsListAllGetSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAllAgentsAdminApiV1AgentsListAllGetSortOrder = {
  NUMBER_1: '1',
  NUMBER_MINUS_1: '-1',
} as const;

export type GetAllAgentsAdminApiV1AgentsListAllGetParams = {
skip?: number;
limit?: number;
sort_by?: string;
sort_order?: GetAllAgentsAdminApiV1AgentsListAllGetSortOrder;
};

export type GetAgentsByUserIdApiV1AgentsUserUserIdGetSortOrder = typeof GetAgentsByUserIdApiV1AgentsUserUserIdGetSortOrder[keyof typeof GetAgentsByUserIdApiV1AgentsUserUserIdGetSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAgentsByUserIdApiV1AgentsUserUserIdGetSortOrder = {
  NUMBER_1: '1',
  NUMBER_MINUS_1: '-1',
} as const;

export type GetAgentsByUserIdApiV1AgentsUserUserIdGetParams = {
skip?: number;
limit?: number;
sort_by?: string;
sort_order?: GetAgentsByUserIdApiV1AgentsUserUserIdGetSortOrder;
};

export type UpdateAgentApiV1AgentsAgentIdPut200 = {[key: string]: string};

export type GetAllAgentsApiV1AgentsGetSortOrder = typeof GetAllAgentsApiV1AgentsGetSortOrder[keyof typeof GetAllAgentsApiV1AgentsGetSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAllAgentsApiV1AgentsGetSortOrder = {
  NUMBER_1: '1',
  NUMBER_MINUS_1: '-1',
} as const;

export type GetAllAgentsApiV1AgentsGetParams = {
skip?: number;
limit?: number;
sort_by?: string;
sort_order?: GetAllAgentsApiV1AgentsGetSortOrder;
};

export type AuthConfirmSignUpApiV1ConfirmSignUpGetParams = {
/**
 * The token sent to the user via email
 */
token: string;
};

export type CheckEmailApiV1CheckEmailGet200 = { [key: string]: unknown };

export type CheckEmailApiV1CheckEmailGetParams = {
/**
 * The email address to check
 */
email: string;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type UserResponseGeoInfo = GeoInfo | null;

export interface UserResponse {
  _id?: string;
  created_at?: string;
  email: string;
  geo_info?: UserResponseGeoInfo;
  is_superuser?: boolean;
  is_verified?: boolean;
  updated_at?: string;
  username: string;
}

export interface UserListResponse {
  total: number;
  users: UserResponse[];
}

export type UpdateUserPayloadGeoInfo = GeoInfo | null;

export interface UpdateUserPayload {
  email: string;
  geo_info?: UpdateUserPayloadGeoInfo;
  username: string;
}

export interface Tools {
  tools: string[];
}

export interface TokenModel {
  access_token: string;
  expires_at: string;
  refresh_token: string;
  token_type?: string;
}

export type TaskNodeModelResponseAnyOf = { [key: string]: unknown };

export type TaskNodeModelResponse = TaskNodeModelResponseAnyOf | null;

export interface TaskNodeModel {
  node_id: string;
  node_number: number;
  predecessor_edges: string[];
  response?: TaskNodeModelResponse;
  solution: string;
  successor_edges: string[];
  task: string;
}

export type StateMachineUpdateState = typeof StateMachineUpdateState[keyof typeof StateMachineUpdateState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StateMachineUpdateState = {
  plan: 'plan',
  divide: 'divide',
  solve: 'solve',
  backtrack: 'backtrack',
  move_on: 'move_on',
  stop: 'stop',
  agent_selection: 'agent_selection',
  query_creation: 'query_creation',
} as const;

export type StateMachineUpdateSolverAgentAnyOf = { [key: string]: unknown };

export type StateMachineUpdateSolverAgent = StateMachineUpdateSolverAgentAnyOf | null;

export type StateMachineUpdatePromptForSolver = string | null;

export interface StateMachineUpdate {
  current_node: TaskNodeModel;
  graph: GraphModel;
  prompt_for_solver?: StateMachineUpdatePromptForSolver;
  solver_agent?: StateMachineUpdateSolverAgent;
  starting_node: TaskNodeModel;
  state: StateMachineUpdateState;
  updated_at?: string;
  user_id: string;
}

export type StateMachineModelState = typeof StateMachineModelState[keyof typeof StateMachineModelState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StateMachineModelState = {
  plan: 'plan',
  divide: 'divide',
  solve: 'solve',
  backtrack: 'backtrack',
  move_on: 'move_on',
  stop: 'stop',
  agent_selection: 'agent_selection',
  query_creation: 'query_creation',
} as const;

export type StateMachineModelSolverAgentAnyOf = { [key: string]: unknown };

export type StateMachineModelSolverAgent = StateMachineModelSolverAgentAnyOf | null;

export type StateMachineModelPromptForSolver = string | null;

export interface StateMachineModel {
  _id?: string;
  created_at?: string;
  current_node: TaskNodeModel;
  graph: GraphModel;
  prompt_for_solver?: StateMachineModelPromptForSolver;
  solver_agent?: StateMachineModelSolverAgent;
  starting_node: TaskNodeModel;
  state?: StateMachineModelState;
  updated_at?: string;
  user_id: string;
}

export interface ResetPasswordPayload {
  email: string;
}

export interface ResendConfirmationEmailPayload {
  email: string;
}

export interface RefreshTokenPayload {
  refresh_token: string;
}

export interface Models {
  models: string[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface GeoInfo {
  altitude: number;
  latitude: number;
  longitude: number;
}

export type EdgeModelEdgeWeight = number | null;

export interface EdgeModel {
  destination_id: string;
  edge_id: string;
  edge_weight?: EdgeModelEdgeWeight;
  source_id: string;
}

export interface GraphModel {
  edges: EdgeModel[];
  graph_id: string;
  nodes: TaskNodeModel[];
}

export type CreateUserPayloadGeoInfo = GeoInfo | null;

export interface CreateUserPayload {
  email: string;
  geo_info?: CreateUserPayloadGeoInfo;
  is_superuser?: boolean;
  password: string;
  username: string;
}

export interface ConversationUpdate {
  name: string;
  updated_at?: string;
}

export type ConversationCreateUserId = string | null;

export type ConversationCreateAgentId = string | null;

export interface ConversationCreate {
  agent_id?: ConversationCreateAgentId;
  created_at?: string;
  name: string;
  updated_at?: string;
  user_id?: ConversationCreateUserId;
}

export interface Conversation {
  _id?: string;
  agent_id: string;
  created_at?: string;
  name: string;
  updated_at?: string;
  user_id: string;
}

export interface ConversationListResponse {
  conversations: Conversation[];
  total: number;
}

export interface ConfirmResetPasswordPayload {
  new_password: string;
  token: string;
}

export interface ChatMessageUpdate {
  content: string;
  /** List of files to be used in the task */
  files?: string[];
  updated_at?: string;
}

export type ChatMessageRole = typeof ChatMessageRole[keyof typeof ChatMessageRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChatMessageRole = {
  user: 'user',
  assistant: 'assistant',
  tool: 'tool',
  system: 'system',
} as const;

export interface ChatMessage {
  _id?: string;
  /** Content of the message.  */
  content: string;
  conversation_id: string;
  created_at?: string;
  /** List of files to be used in the task */
  files?: string[];
  role: ChatMessageRole;
  updated_at?: string;
  user_id: string;
}

export interface ChatMessageListResponse {
  chat_messages: ChatMessage[];
  total: number;
}

export interface ChangePasswordPayload {
  new_password: string;
  old_password: string;
}

export interface BodyInitiateSessionApiV1StateMachinesStartPost {
  delay?: number;
  files?: Blob[];
  prompt: string;
  stream?: boolean;
}

export interface BodyCreateSessionApiV1StateMachinesPost {
  files?: Blob[];
  prompt: string;
}

export interface BodyChatWithAgentApiV1ConversationsConversationIdChatMessagesPost {
  /** Additional configuration options as a JSON string */
  additional_configs?: string;
  /** The data of the agent */
  agent_data: string;
  files?: Blob[];
  /** Previous chat messages */
  messages?: string;
  /** The user's query */
  query: string;
}

export type BodyAuthLoginApiV1LoginPostGrantType = string | null;

export type BodyAuthLoginApiV1LoginPostClientSecret = string | null;

export type BodyAuthLoginApiV1LoginPostClientId = string | null;

export interface BodyAuthLoginApiV1LoginPost {
  client_id?: BodyAuthLoginApiV1LoginPostClientId;
  client_secret?: BodyAuthLoginApiV1LoginPostClientSecret;
  grant_type?: BodyAuthLoginApiV1LoginPostGrantType;
  password: string;
  scope?: string;
  username: string;
}

export type AgentUpdateTools = 'all' | string[] | null;

export interface AgentUpdate {
  description: string;
  memory_window?: number;
  model: string;
  name: string;
  system_prompt: string;
  tools: AgentUpdateTools;
  updated_at?: string;
}

export type AgentCreateUserId = string | null;

export type AgentCreateType = typeof AgentCreateType[keyof typeof AgentCreateType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AgentCreateType = {
  text_to_text: 'text_to_text',
  image_to_text: 'image_to_text',
  audio_to_text: 'audio_to_text',
} as const;

export type AgentCreateTools = 'all' | string[] | null;

export interface AgentCreate {
  created_at?: string;
  description?: string;
  memory_window?: number;
  model: string;
  name: string;
  system_prompt?: string;
  tools?: AgentCreateTools;
  type?: AgentCreateType;
  updated_at?: string;
  user_id?: AgentCreateUserId;
}

export type AgentType = typeof AgentType[keyof typeof AgentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AgentType = {
  text_to_text: 'text_to_text',
  image_to_text: 'image_to_text',
  audio_to_text: 'audio_to_text',
} as const;

export type AgentTools = 'all' | string[] | null;

export interface Agent {
  _id?: string;
  created_at?: string;
  description: string;
  memory_window?: number;
  model: string;
  name: string;
  system_prompt: string;
  tools?: AgentTools;
  type: AgentType;
  updated_at?: string;
  user_id: string;
}

