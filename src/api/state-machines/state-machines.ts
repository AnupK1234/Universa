/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Universa
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  BodyCreateSessionApiV1StateMachinesPost,
  BodyInitiateSessionApiV1StateMachinesStartPost,
  GetAllSessionsApiV1StateMachinesGetAllSessionsPost200,
  GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody,
  GetAllSessionsApiV1StateMachinesGetAllSessionsPostParams,
  HTTPValidationError,
  RunSingleIterationApiV1StateMachinesRunSingleIterationPost200,
  RunSingleIterationApiV1StateMachinesRunSingleIterationPostParams,
  StateMachineModel,
  StateMachineUpdate,
} from "../api.schemas";
import { customInstance } from "../../utils/api-client/customInstance.mjs";

/**
 * @summary Get All Sessions
 */
export const getAllSessionsApiV1StateMachinesGetAllSessionsPost = (
  getAllSessionsApiV1StateMachinesGetAllSessionsPostBody: GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody,
  params?: GetAllSessionsApiV1StateMachinesGetAllSessionsPostParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetAllSessionsApiV1StateMachinesGetAllSessionsPost200>({
    url: `/api/v1/state_machines/get_all_sessions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: getAllSessionsApiV1StateMachinesGetAllSessionsPostBody,
    params,
    signal,
  });
};

export const getGetAllSessionsApiV1StateMachinesGetAllSessionsPostMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof getAllSessionsApiV1StateMachinesGetAllSessionsPost>
      >,
      TError,
      {
        data: GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody;
        params?: GetAllSessionsApiV1StateMachinesGetAllSessionsPostParams;
      },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof getAllSessionsApiV1StateMachinesGetAllSessionsPost>
    >,
    TError,
    {
      data: GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody;
      params?: GetAllSessionsApiV1StateMachinesGetAllSessionsPostParams;
    },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof getAllSessionsApiV1StateMachinesGetAllSessionsPost>
      >,
      {
        data: GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody;
        params?: GetAllSessionsApiV1StateMachinesGetAllSessionsPostParams;
      }
    > = (props) => {
      const { data, params } = props ?? {};

      return getAllSessionsApiV1StateMachinesGetAllSessionsPost(data, params);
    };

    return { mutationFn, ...mutationOptions };
  };

export type GetAllSessionsApiV1StateMachinesGetAllSessionsPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getAllSessionsApiV1StateMachinesGetAllSessionsPost>
    >
  >;
export type GetAllSessionsApiV1StateMachinesGetAllSessionsPostMutationBody =
  GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody;
export type GetAllSessionsApiV1StateMachinesGetAllSessionsPostMutationError =
  HTTPValidationError;

/**
 * @summary Get All Sessions
 */
export const useGetAllSessionsApiV1StateMachinesGetAllSessionsPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof getAllSessionsApiV1StateMachinesGetAllSessionsPost>
    >,
    TError,
    {
      data: GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody;
      params?: GetAllSessionsApiV1StateMachinesGetAllSessionsPostParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<typeof getAllSessionsApiV1StateMachinesGetAllSessionsPost>
  >,
  TError,
  {
    data: GetAllSessionsApiV1StateMachinesGetAllSessionsPostBody;
    params?: GetAllSessionsApiV1StateMachinesGetAllSessionsPostParams;
  },
  TContext
> => {
  const mutationOptions =
    getGetAllSessionsApiV1StateMachinesGetAllSessionsPostMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
/**
 * @summary Get Single Session
 */
export const getSingleSessionApiV1StateMachinesStateMachineIdGet = (
  stateMachineId: string,
  signal?: AbortSignal,
) => {
  return customInstance<StateMachineModel>({
    url: `/api/v1/state_machines/${stateMachineId}`,
    method: "GET",
    signal,
  });
};

export const getGetSingleSessionApiV1StateMachinesStateMachineIdGetQueryKey = (
  stateMachineId: string,
) => {
  return [`/api/v1/state_machines/${stateMachineId}`] as const;
};

export const getGetSingleSessionApiV1StateMachinesStateMachineIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
    >,
    TError = HTTPValidationError,
  >(
    stateMachineId: string,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getSingleSessionApiV1StateMachinesStateMachineIdGet
            >
          >,
          TError,
          TData
        >
      >;
    },
  ) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetSingleSessionApiV1StateMachinesStateMachineIdGetQueryKey(
        stateMachineId,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
      >
    > = ({ signal }) =>
      getSingleSessionApiV1StateMachinesStateMachineIdGet(
        stateMachineId,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!stateMachineId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData> };
  };

export type GetSingleSessionApiV1StateMachinesStateMachineIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
    >
  >;
export type GetSingleSessionApiV1StateMachinesStateMachineIdGetQueryError =
  HTTPValidationError;

export function useGetSingleSessionApiV1StateMachinesStateMachineIdGet<
  TData = Awaited<
    ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
  >,
  TError = HTTPValidationError,
>(
  stateMachineId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getSingleSessionApiV1StateMachinesStateMachineIdGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetSingleSessionApiV1StateMachinesStateMachineIdGet<
  TData = Awaited<
    ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
  >,
  TError = HTTPValidationError,
>(
  stateMachineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getSingleSessionApiV1StateMachinesStateMachineIdGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetSingleSessionApiV1StateMachinesStateMachineIdGet<
  TData = Awaited<
    ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
  >,
  TError = HTTPValidationError,
>(
  stateMachineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Single Session
 */

export function useGetSingleSessionApiV1StateMachinesStateMachineIdGet<
  TData = Awaited<
    ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
  >,
  TError = HTTPValidationError,
>(
  stateMachineId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getSingleSessionApiV1StateMachinesStateMachineIdGet>
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getGetSingleSessionApiV1StateMachinesStateMachineIdGetQueryOptions(
      stateMachineId,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Session
 */
export const updateSessionApiV1StateMachinesStateMachineIdPut = (
  stateMachineId: string,
  stateMachineUpdate: StateMachineUpdate,
) => {
  return customInstance<unknown>({
    url: `/api/v1/state_machines/${stateMachineId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: stateMachineUpdate,
  });
};

export const getUpdateSessionApiV1StateMachinesStateMachineIdPutMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof updateSessionApiV1StateMachinesStateMachineIdPut>
      >,
      TError,
      { stateMachineId: string; data: StateMachineUpdate },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof updateSessionApiV1StateMachinesStateMachineIdPut>
    >,
    TError,
    { stateMachineId: string; data: StateMachineUpdate },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof updateSessionApiV1StateMachinesStateMachineIdPut>
      >,
      { stateMachineId: string; data: StateMachineUpdate }
    > = (props) => {
      const { stateMachineId, data } = props ?? {};

      return updateSessionApiV1StateMachinesStateMachineIdPut(
        stateMachineId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateSessionApiV1StateMachinesStateMachineIdPutMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateSessionApiV1StateMachinesStateMachineIdPut>>
  >;
export type UpdateSessionApiV1StateMachinesStateMachineIdPutMutationBody =
  StateMachineUpdate;
export type UpdateSessionApiV1StateMachinesStateMachineIdPutMutationError =
  HTTPValidationError;

/**
 * @summary Update Session
 */
export const useUpdateSessionApiV1StateMachinesStateMachineIdPut = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof updateSessionApiV1StateMachinesStateMachineIdPut>
    >,
    TError,
    { stateMachineId: string; data: StateMachineUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSessionApiV1StateMachinesStateMachineIdPut>>,
  TError,
  { stateMachineId: string; data: StateMachineUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateSessionApiV1StateMachinesStateMachineIdPutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Session
 */
export const deleteSessionApiV1StateMachinesStateMachineIdDelete = (
  stateMachineId: string,
) => {
  return customInstance<unknown>({
    url: `/api/v1/state_machines/${stateMachineId}`,
    method: "DELETE",
  });
};

export const getDeleteSessionApiV1StateMachinesStateMachineIdDeleteMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteSessionApiV1StateMachinesStateMachineIdDelete>
      >,
      TError,
      { stateMachineId: string },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteSessionApiV1StateMachinesStateMachineIdDelete>
    >,
    TError,
    { stateMachineId: string },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteSessionApiV1StateMachinesStateMachineIdDelete>
      >,
      { stateMachineId: string }
    > = (props) => {
      const { stateMachineId } = props ?? {};

      return deleteSessionApiV1StateMachinesStateMachineIdDelete(
        stateMachineId,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteSessionApiV1StateMachinesStateMachineIdDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof deleteSessionApiV1StateMachinesStateMachineIdDelete>
    >
  >;

export type DeleteSessionApiV1StateMachinesStateMachineIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Session
 */
export const useDeleteSessionApiV1StateMachinesStateMachineIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteSessionApiV1StateMachinesStateMachineIdDelete>
    >,
    TError,
    { stateMachineId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<typeof deleteSessionApiV1StateMachinesStateMachineIdDelete>
  >,
  TError,
  { stateMachineId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteSessionApiV1StateMachinesStateMachineIdDeleteMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
/**
 * @summary Create Session
 */
export const createSessionApiV1StateMachinesPost = (
  bodyCreateSessionApiV1StateMachinesPost: BodyCreateSessionApiV1StateMachinesPost,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append("prompt", bodyCreateSessionApiV1StateMachinesPost.prompt);
  if (bodyCreateSessionApiV1StateMachinesPost.files !== undefined) {
    bodyCreateSessionApiV1StateMachinesPost.files.forEach((value) =>
      formData.append("files", value),
    );
  }

  return customInstance<StateMachineModel>({
    url: `/api/v1/state_machines/`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getCreateSessionApiV1StateMachinesPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSessionApiV1StateMachinesPost>>,
    TError,
    { data: BodyCreateSessionApiV1StateMachinesPost },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSessionApiV1StateMachinesPost>>,
  TError,
  { data: BodyCreateSessionApiV1StateMachinesPost },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSessionApiV1StateMachinesPost>>,
    { data: BodyCreateSessionApiV1StateMachinesPost }
  > = (props) => {
    const { data } = props ?? {};

    return createSessionApiV1StateMachinesPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSessionApiV1StateMachinesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSessionApiV1StateMachinesPost>>
>;
export type CreateSessionApiV1StateMachinesPostMutationBody =
  BodyCreateSessionApiV1StateMachinesPost;
export type CreateSessionApiV1StateMachinesPostMutationError =
  HTTPValidationError;

/**
 * @summary Create Session
 */
export const useCreateSessionApiV1StateMachinesPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSessionApiV1StateMachinesPost>>,
    TError,
    { data: BodyCreateSessionApiV1StateMachinesPost },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createSessionApiV1StateMachinesPost>>,
  TError,
  { data: BodyCreateSessionApiV1StateMachinesPost },
  TContext
> => {
  const mutationOptions =
    getCreateSessionApiV1StateMachinesPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Run Single Iteration
 */
export const runSingleIterationApiV1StateMachinesRunSingleIterationPost = (
  params: RunSingleIterationApiV1StateMachinesRunSingleIterationPostParams,
  signal?: AbortSignal,
) => {
  return customInstance<RunSingleIterationApiV1StateMachinesRunSingleIterationPost200>(
    {
      url: `/api/v1/state_machines/run_single_iteration`,
      method: "POST",
      params,
      signal,
    },
  );
};

export const getRunSingleIterationApiV1StateMachinesRunSingleIterationPostMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof runSingleIterationApiV1StateMachinesRunSingleIterationPost
        >
      >,
      TError,
      {
        params: RunSingleIterationApiV1StateMachinesRunSingleIterationPostParams;
      },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof runSingleIterationApiV1StateMachinesRunSingleIterationPost
      >
    >,
    TError,
    {
      params: RunSingleIterationApiV1StateMachinesRunSingleIterationPostParams;
    },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof runSingleIterationApiV1StateMachinesRunSingleIterationPost
        >
      >,
      {
        params: RunSingleIterationApiV1StateMachinesRunSingleIterationPostParams;
      }
    > = (props) => {
      const { params } = props ?? {};

      return runSingleIterationApiV1StateMachinesRunSingleIterationPost(params);
    };

    return { mutationFn, ...mutationOptions };
  };

export type RunSingleIterationApiV1StateMachinesRunSingleIterationPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof runSingleIterationApiV1StateMachinesRunSingleIterationPost
      >
    >
  >;

export type RunSingleIterationApiV1StateMachinesRunSingleIterationPostMutationError =
  HTTPValidationError;

/**
 * @summary Run Single Iteration
 */
export const useRunSingleIterationApiV1StateMachinesRunSingleIterationPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<
        typeof runSingleIterationApiV1StateMachinesRunSingleIterationPost
      >
    >,
    TError,
    {
      params: RunSingleIterationApiV1StateMachinesRunSingleIterationPostParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<
      typeof runSingleIterationApiV1StateMachinesRunSingleIterationPost
    >
  >,
  TError,
  { params: RunSingleIterationApiV1StateMachinesRunSingleIterationPostParams },
  TContext
> => {
  const mutationOptions =
    getRunSingleIterationApiV1StateMachinesRunSingleIterationPostMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
/**
 * This function initiates a session with the master agent.
 * @summary Initiate Session
 */
export const initiateSessionApiV1StateMachinesStartPost = (
  bodyInitiateSessionApiV1StateMachinesStartPost: BodyInitiateSessionApiV1StateMachinesStartPost,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(
    "prompt",
    bodyInitiateSessionApiV1StateMachinesStartPost.prompt,
  );
  if (bodyInitiateSessionApiV1StateMachinesStartPost.stream !== undefined) {
    formData.append(
      "stream",
      bodyInitiateSessionApiV1StateMachinesStartPost.stream.toString(),
    );
  }
  if (bodyInitiateSessionApiV1StateMachinesStartPost.delay !== undefined) {
    formData.append(
      "delay",
      bodyInitiateSessionApiV1StateMachinesStartPost.delay.toString(),
    );
  }
  if (bodyInitiateSessionApiV1StateMachinesStartPost.files !== undefined) {
    bodyInitiateSessionApiV1StateMachinesStartPost.files.forEach((value) =>
      formData.append("files", value),
    );
  }

  return customInstance<unknown>({
    url: `/api/v1/state_machines/start`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getInitiateSessionApiV1StateMachinesStartPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof initiateSessionApiV1StateMachinesStartPost>>,
    TError,
    { data: BodyInitiateSessionApiV1StateMachinesStartPost },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof initiateSessionApiV1StateMachinesStartPost>>,
  TError,
  { data: BodyInitiateSessionApiV1StateMachinesStartPost },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof initiateSessionApiV1StateMachinesStartPost>>,
    { data: BodyInitiateSessionApiV1StateMachinesStartPost }
  > = (props) => {
    const { data } = props ?? {};

    return initiateSessionApiV1StateMachinesStartPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InitiateSessionApiV1StateMachinesStartPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof initiateSessionApiV1StateMachinesStartPost>>
  >;
export type InitiateSessionApiV1StateMachinesStartPostMutationBody =
  BodyInitiateSessionApiV1StateMachinesStartPost;
export type InitiateSessionApiV1StateMachinesStartPostMutationError =
  HTTPValidationError;

/**
 * @summary Initiate Session
 */
export const useInitiateSessionApiV1StateMachinesStartPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof initiateSessionApiV1StateMachinesStartPost>>,
    TError,
    { data: BodyInitiateSessionApiV1StateMachinesStartPost },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof initiateSessionApiV1StateMachinesStartPost>>,
  TError,
  { data: BodyInitiateSessionApiV1StateMachinesStartPost },
  TContext
> => {
  const mutationOptions =
    getInitiateSessionApiV1StateMachinesStartPostMutationOptions(options);

  return useMutation(mutationOptions);
};
