/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Universa
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetUsersByGeoinfoApiV1UsersGeoinfoGetParams,
  HTTPValidationError,
  ReadUsersApiV1UsersGetParams,
  UpdateUserPayload,
  UserListResponse,
  UserResponse,
} from "../api.schemas";
import { customInstance } from "../../utils/api-client/customInstance.mjs";

/**
 * Get a list of users.
 * @summary Read Users
 */
export const readUsersApiV1UsersGet = (
  params?: ReadUsersApiV1UsersGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<UserListResponse>({
    url: `/api/v1/users/`,
    method: "GET",
    params,
    signal,
  });
};

export const getReadUsersApiV1UsersGetQueryKey = (
  params?: ReadUsersApiV1UsersGetParams,
) => {
  return [`/api/v1/users/`, ...(params ? [params] : [])] as const;
};

export const getReadUsersApiV1UsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
  TError = HTTPValidationError,
>(
  params?: ReadUsersApiV1UsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReadUsersApiV1UsersGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof readUsersApiV1UsersGet>>
  > = ({ signal }) => readUsersApiV1UsersGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ReadUsersApiV1UsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readUsersApiV1UsersGet>>
>;
export type ReadUsersApiV1UsersGetQueryError = HTTPValidationError;

export function useReadUsersApiV1UsersGet<
  TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
  TError = HTTPValidationError,
>(
  params: undefined | ReadUsersApiV1UsersGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useReadUsersApiV1UsersGet<
  TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
  TError = HTTPValidationError,
>(
  params?: ReadUsersApiV1UsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useReadUsersApiV1UsersGet<
  TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
  TError = HTTPValidationError,
>(
  params?: ReadUsersApiV1UsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Read Users
 */

export function useReadUsersApiV1UsersGet<
  TData = Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
  TError = HTTPValidationError,
>(
  params?: ReadUsersApiV1UsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUsersApiV1UsersGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getReadUsersApiV1UsersGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a list of users by geoinfo.
 * @summary Get Users By Geoinfo
 */
export const getUsersByGeoinfoApiV1UsersGeoinfoGet = (
  params: GetUsersByGeoinfoApiV1UsersGeoinfoGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<UserListResponse>({
    url: `/api/v1/users/geoinfo`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetUsersByGeoinfoApiV1UsersGeoinfoGetQueryKey = (
  params: GetUsersByGeoinfoApiV1UsersGeoinfoGetParams,
) => {
  return [`/api/v1/users/geoinfo`, ...(params ? [params] : [])] as const;
};

export const getGetUsersByGeoinfoApiV1UsersGeoinfoGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
  TError = HTTPValidationError,
>(
  params: GetUsersByGeoinfoApiV1UsersGeoinfoGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUsersByGeoinfoApiV1UsersGeoinfoGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>
  > = ({ signal }) => getUsersByGeoinfoApiV1UsersGeoinfoGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUsersByGeoinfoApiV1UsersGeoinfoGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>
>;
export type GetUsersByGeoinfoApiV1UsersGeoinfoGetQueryError =
  HTTPValidationError;

export function useGetUsersByGeoinfoApiV1UsersGeoinfoGet<
  TData = Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
  TError = HTTPValidationError,
>(
  params: GetUsersByGeoinfoApiV1UsersGeoinfoGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetUsersByGeoinfoApiV1UsersGeoinfoGet<
  TData = Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
  TError = HTTPValidationError,
>(
  params: GetUsersByGeoinfoApiV1UsersGeoinfoGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUsersByGeoinfoApiV1UsersGeoinfoGet<
  TData = Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
  TError = HTTPValidationError,
>(
  params: GetUsersByGeoinfoApiV1UsersGeoinfoGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Users By Geoinfo
 */

export function useGetUsersByGeoinfoApiV1UsersGeoinfoGet<
  TData = Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
  TError = HTTPValidationError,
>(
  params: GetUsersByGeoinfoApiV1UsersGeoinfoGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersByGeoinfoApiV1UsersGeoinfoGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetUsersByGeoinfoApiV1UsersGeoinfoGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get information about the currently authenticated user.
 * @summary Read Current User
 */
export const readCurrentUserApiV1UsersMeGet = (signal?: AbortSignal) => {
  return customInstance<UserResponse>({
    url: `/api/v1/users/me`,
    method: "GET",
    signal,
  });
};

export const getReadCurrentUserApiV1UsersMeGetQueryKey = () => {
  return [`/api/v1/users/me`] as const;
};

export const getReadCurrentUserApiV1UsersMeGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getReadCurrentUserApiV1UsersMeGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>
  > = ({ signal }) => readCurrentUserApiV1UsersMeGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ReadCurrentUserApiV1UsersMeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>
>;
export type ReadCurrentUserApiV1UsersMeGetQueryError = unknown;

export function useReadCurrentUserApiV1UsersMeGet<
  TData = Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useReadCurrentUserApiV1UsersMeGet<
  TData = Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useReadCurrentUserApiV1UsersMeGet<
  TData = Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Read Current User
 */

export function useReadCurrentUserApiV1UsersMeGet<
  TData = Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof readCurrentUserApiV1UsersMeGet>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getReadCurrentUserApiV1UsersMeGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a specific user by id.
 * @summary Read User By Id
 */
export const readUserByIdApiV1UsersUserIdGet = (
  userId: string,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse>({
    url: `/api/v1/users/${userId}`,
    method: "GET",
    signal,
  });
};

export const getReadUserByIdApiV1UsersUserIdGetQueryKey = (userId: string) => {
  return [`/api/v1/users/${userId}`] as const;
};

export const getReadUserByIdApiV1UsersUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getReadUserByIdApiV1UsersUserIdGetQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>
  > = ({ signal }) => readUserByIdApiV1UsersUserIdGet(userId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ReadUserByIdApiV1UsersUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>
>;
export type ReadUserByIdApiV1UsersUserIdGetQueryError = HTTPValidationError;

export function useReadUserByIdApiV1UsersUserIdGet<
  TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useReadUserByIdApiV1UsersUserIdGet<
  TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useReadUserByIdApiV1UsersUserIdGet<
  TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Read User By Id
 */

export function useReadUserByIdApiV1UsersUserIdGet<
  TData = Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
  TError = HTTPValidationError,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof readUserByIdApiV1UsersUserIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getReadUserByIdApiV1UsersUserIdGetQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update a user.
 * @summary Update User
 */
export const updateUserApiV1UsersUserIdPut = (
  userId: string,
  updateUserPayload: UpdateUserPayload,
) => {
  return customInstance<UserResponse>({
    url: `/api/v1/users/${userId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateUserPayload,
  });
};

export const getUpdateUserApiV1UsersUserIdPutMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
    TError,
    { userId: string; data: UpdateUserPayload },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
  TError,
  { userId: string; data: UpdateUserPayload },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
    { userId: string; data: UpdateUserPayload }
  > = (props) => {
    const { userId, data } = props ?? {};

    return updateUserApiV1UsersUserIdPut(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserApiV1UsersUserIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>
>;
export type UpdateUserApiV1UsersUserIdPutMutationBody = UpdateUserPayload;
export type UpdateUserApiV1UsersUserIdPutMutationError = HTTPValidationError;

/**
 * @summary Update User
 */
export const useUpdateUserApiV1UsersUserIdPut = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
    TError,
    { userId: string; data: UpdateUserPayload },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUserApiV1UsersUserIdPut>>,
  TError,
  { userId: string; data: UpdateUserPayload },
  TContext
> => {
  const mutationOptions =
    getUpdateUserApiV1UsersUserIdPutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete a user.
 * @summary Delete User
 */
export const deleteUserApiV1UsersUserIdDelete = (userId: string) => {
  return customInstance<unknown>({
    url: `/api/v1/users/${userId}`,
    method: "DELETE",
  });
};

export const getDeleteUserApiV1UsersUserIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
    TError,
    { userId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
  TError,
  { userId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {};

    return deleteUserApiV1UsersUserIdDelete(userId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserApiV1UsersUserIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>
>;

export type DeleteUserApiV1UsersUserIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete User
 */
export const useDeleteUserApiV1UsersUserIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
    TError,
    { userId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteUserApiV1UsersUserIdDelete>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteUserApiV1UsersUserIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
