/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Universa
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Conversation,
  ConversationCreate,
  ConversationListResponse,
  ConversationUpdate,
  GetConversationsApiV1AgentsAgentIdConversationsGetParams,
  HTTPValidationError,
} from "../api.schemas";
import { customInstance } from "../../utils/api-client/customInstance.mjs";

/**
 * Get all conversations for the current user.
 * @summary Get Conversations
 */
export const getConversationsApiV1AgentsAgentIdConversationsGet = (
  agentId: string,
  params?: GetConversationsApiV1AgentsAgentIdConversationsGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<ConversationListResponse>({
    url: `/api/v1/agents/${agentId}/conversations/`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetConversationsApiV1AgentsAgentIdConversationsGetQueryKey = (
  agentId: string,
  params?: GetConversationsApiV1AgentsAgentIdConversationsGetParams,
) => {
  return [
    `/api/v1/agents/${agentId}/conversations/`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetConversationsApiV1AgentsAgentIdConversationsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
    >,
    TError = HTTPValidationError,
  >(
    agentId: string,
    params?: GetConversationsApiV1AgentsAgentIdConversationsGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getConversationsApiV1AgentsAgentIdConversationsGet
            >
          >,
          TError,
          TData
        >
      >;
    },
  ) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetConversationsApiV1AgentsAgentIdConversationsGetQueryKey(
        agentId,
        params,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
      >
    > = ({ signal }) =>
      getConversationsApiV1AgentsAgentIdConversationsGet(
        agentId,
        params,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!agentId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData> };
  };

export type GetConversationsApiV1AgentsAgentIdConversationsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
    >
  >;
export type GetConversationsApiV1AgentsAgentIdConversationsGetQueryError =
  HTTPValidationError;

export function useGetConversationsApiV1AgentsAgentIdConversationsGet<
  TData = Awaited<
    ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
  >,
  TError = HTTPValidationError,
>(
  agentId: string,
  params: undefined | GetConversationsApiV1AgentsAgentIdConversationsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getConversationsApiV1AgentsAgentIdConversationsGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetConversationsApiV1AgentsAgentIdConversationsGet<
  TData = Awaited<
    ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
  >,
  TError = HTTPValidationError,
>(
  agentId: string,
  params?: GetConversationsApiV1AgentsAgentIdConversationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getConversationsApiV1AgentsAgentIdConversationsGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetConversationsApiV1AgentsAgentIdConversationsGet<
  TData = Awaited<
    ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
  >,
  TError = HTTPValidationError,
>(
  agentId: string,
  params?: GetConversationsApiV1AgentsAgentIdConversationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Conversations
 */

export function useGetConversationsApiV1AgentsAgentIdConversationsGet<
  TData = Awaited<
    ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
  >,
  TError = HTTPValidationError,
>(
  agentId: string,
  params?: GetConversationsApiV1AgentsAgentIdConversationsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getConversationsApiV1AgentsAgentIdConversationsGet>
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getGetConversationsApiV1AgentsAgentIdConversationsGetQueryOptions(
      agentId,
      params,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new conversation.
 * @summary Create Conversation
 */
export const createConversationApiV1AgentsAgentIdConversationsPost = (
  agentId: string,
  conversationCreate: ConversationCreate,
  signal?: AbortSignal,
) => {
  return customInstance<Conversation>({
    url: `/api/v1/agents/${agentId}/conversations/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: conversationCreate,
    signal,
  });
};

export const getCreateConversationApiV1AgentsAgentIdConversationsPostMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof createConversationApiV1AgentsAgentIdConversationsPost>
      >,
      TError,
      { agentId: string; data: ConversationCreate },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof createConversationApiV1AgentsAgentIdConversationsPost>
    >,
    TError,
    { agentId: string; data: ConversationCreate },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof createConversationApiV1AgentsAgentIdConversationsPost>
      >,
      { agentId: string; data: ConversationCreate }
    > = (props) => {
      const { agentId, data } = props ?? {};

      return createConversationApiV1AgentsAgentIdConversationsPost(
        agentId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CreateConversationApiV1AgentsAgentIdConversationsPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof createConversationApiV1AgentsAgentIdConversationsPost>
    >
  >;
export type CreateConversationApiV1AgentsAgentIdConversationsPostMutationBody =
  ConversationCreate;
export type CreateConversationApiV1AgentsAgentIdConversationsPostMutationError =
  HTTPValidationError;

/**
 * @summary Create Conversation
 */
export const useCreateConversationApiV1AgentsAgentIdConversationsPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof createConversationApiV1AgentsAgentIdConversationsPost>
    >,
    TError,
    { agentId: string; data: ConversationCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<
    ReturnType<typeof createConversationApiV1AgentsAgentIdConversationsPost>
  >,
  TError,
  { agentId: string; data: ConversationCreate },
  TContext
> => {
  const mutationOptions =
    getCreateConversationApiV1AgentsAgentIdConversationsPostMutationOptions(
      options,
    );

  return useMutation(mutationOptions);
};
/**
 * Get a conversation by ID.
 * @summary Get Conversation
 */
export const getConversationApiV1AgentsAgentIdConversationsConversationIdGet = (
  agentId: string,
  conversationId: string,
  signal?: AbortSignal,
) => {
  return customInstance<Conversation>({
    url: `/api/v1/agents/${agentId}/conversations/${conversationId}`,
    method: "GET",
    signal,
  });
};

export const getGetConversationApiV1AgentsAgentIdConversationsConversationIdGetQueryKey =
  (agentId: string, conversationId: string) => {
    return [
      `/api/v1/agents/${agentId}/conversations/${conversationId}`,
    ] as const;
  };

export const getGetConversationApiV1AgentsAgentIdConversationsConversationIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
      >
    >,
    TError = HTTPValidationError,
  >(
    agentId: string,
    conversationId: string,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
            >
          >,
          TError,
          TData
        >
      >;
    },
  ) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetConversationApiV1AgentsAgentIdConversationsConversationIdGetQueryKey(
        agentId,
        conversationId,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
        >
      >
    > = ({ signal }) =>
      getConversationApiV1AgentsAgentIdConversationsConversationIdGet(
        agentId,
        conversationId,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!(agentId && conversationId),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData> };
  };

export type GetConversationApiV1AgentsAgentIdConversationsConversationIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
      >
    >
  >;
export type GetConversationApiV1AgentsAgentIdConversationsConversationIdGetQueryError =
  HTTPValidationError;

export function useGetConversationApiV1AgentsAgentIdConversationsConversationIdGet<
  TData = Awaited<
    ReturnType<
      typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
    >
  >,
  TError = HTTPValidationError,
>(
  agentId: string,
  conversationId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetConversationApiV1AgentsAgentIdConversationsConversationIdGet<
  TData = Awaited<
    ReturnType<
      typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
    >
  >,
  TError = HTTPValidationError,
>(
  agentId: string,
  conversationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
            >
          >,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetConversationApiV1AgentsAgentIdConversationsConversationIdGet<
  TData = Awaited<
    ReturnType<
      typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
    >
  >,
  TError = HTTPValidationError,
>(
  agentId: string,
  conversationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
          >
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Conversation
 */

export function useGetConversationApiV1AgentsAgentIdConversationsConversationIdGet<
  TData = Awaited<
    ReturnType<
      typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
    >
  >,
  TError = HTTPValidationError,
>(
  agentId: string,
  conversationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getConversationApiV1AgentsAgentIdConversationsConversationIdGet
          >
        >,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getGetConversationApiV1AgentsAgentIdConversationsConversationIdGetQueryOptions(
      agentId,
      conversationId,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update a conversation.
 * @summary Update Conversation
 */
export const updateConversationApiV1AgentsAgentIdConversationsConversationIdPut =
  (
    agentId: string,
    conversationId: string,
    conversationUpdate: ConversationUpdate,
  ) => {
    return customInstance<unknown>({
      url: `/api/v1/agents/${agentId}/conversations/${conversationId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: conversationUpdate,
    });
  };

export const getUpdateConversationApiV1AgentsAgentIdConversationsConversationIdPutMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof updateConversationApiV1AgentsAgentIdConversationsConversationIdPut
        >
      >,
      TError,
      { agentId: string; conversationId: string; data: ConversationUpdate },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof updateConversationApiV1AgentsAgentIdConversationsConversationIdPut
      >
    >,
    TError,
    { agentId: string; conversationId: string; data: ConversationUpdate },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof updateConversationApiV1AgentsAgentIdConversationsConversationIdPut
        >
      >,
      { agentId: string; conversationId: string; data: ConversationUpdate }
    > = (props) => {
      const { agentId, conversationId, data } = props ?? {};

      return updateConversationApiV1AgentsAgentIdConversationsConversationIdPut(
        agentId,
        conversationId,
        data,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateConversationApiV1AgentsAgentIdConversationsConversationIdPutMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof updateConversationApiV1AgentsAgentIdConversationsConversationIdPut
      >
    >
  >;
export type UpdateConversationApiV1AgentsAgentIdConversationsConversationIdPutMutationBody =
  ConversationUpdate;
export type UpdateConversationApiV1AgentsAgentIdConversationsConversationIdPutMutationError =
  HTTPValidationError;

/**
 * @summary Update Conversation
 */
export const useUpdateConversationApiV1AgentsAgentIdConversationsConversationIdPut =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof updateConversationApiV1AgentsAgentIdConversationsConversationIdPut
        >
      >,
      TError,
      { agentId: string; conversationId: string; data: ConversationUpdate },
      TContext
    >;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof updateConversationApiV1AgentsAgentIdConversationsConversationIdPut
      >
    >,
    TError,
    { agentId: string; conversationId: string; data: ConversationUpdate },
    TContext
  > => {
    const mutationOptions =
      getUpdateConversationApiV1AgentsAgentIdConversationsConversationIdPutMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };
/**
 * Delete a conversation along with all the chat_messages
of that conversations.
 * @summary Delete Conversation
 */
export const deleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete =
  (agentId: string, conversationId: string) => {
    return customInstance<unknown>({
      url: `/api/v1/agents/${agentId}/conversations/${conversationId}`,
      method: "DELETE",
    });
  };

export const getDeleteConversationApiV1AgentsAgentIdConversationsConversationIdDeleteMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete
        >
      >,
      TError,
      { agentId: string; conversationId: string },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof deleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete
      >
    >,
    TError,
    { agentId: string; conversationId: string },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof deleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete
        >
      >,
      { agentId: string; conversationId: string }
    > = (props) => {
      const { agentId, conversationId } = props ?? {};

      return deleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete(
        agentId,
        conversationId,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteConversationApiV1AgentsAgentIdConversationsConversationIdDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete
      >
    >
  >;

export type DeleteConversationApiV1AgentsAgentIdConversationsConversationIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Conversation
 */
export const useDeleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete
        >
      >,
      TError,
      { agentId: string; conversationId: string },
      TContext
    >;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof deleteConversationApiV1AgentsAgentIdConversationsConversationIdDelete
      >
    >,
    TError,
    { agentId: string; conversationId: string },
    TContext
  > => {
    const mutationOptions =
      getDeleteConversationApiV1AgentsAgentIdConversationsConversationIdDeleteMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };
